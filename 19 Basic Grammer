# 01 中文编码
#!/usr/bin/env python#coding:utf8

# 02 变量
变量名可以包括英文、数字以及下划线，但不能以数字开头，区分大小写
用纯英文，取有意义的名字，便于理解每个变量的作用
变量类型有：数值、字符串、列表、元组、字典

# 03 数值
整型和浮点型
# 整型
a = 1
# 浮点型
b = 2.1
print a,b

# 04 字符串
# 位置下标从0开始c = 'Hello World'# 打印结果为H，下标为0表示第一个字符print c[0]
# 打印结果为d，下标为负数表示从后往前数# 所以-1表示倒数第一个字符print c[-1]
# 使用:返回一个片段，冒号前后分别为开始下标和结束下标# 包括开始下标，但不包括结束下标
# 因此c[1:5]表示，返回下标从1到4的片段，即第二个到第五个字符print c[1:5]
# 冒号前后的下标同样可以使用负数
# 或者不提供，表示从最左端开始或一直到最右端print c[1:-1], c[:5], c[3:]

# 05 列表
列表好比一条队伍，里面依次存放着多个变量。
列表和字符串类似，但字符串中的每个元素都是字符，而列表中的每个元素可以是任意类型的变量。
# 使用[]定义一个空列表，使用append()向列表尾部添加一个元素
# 如果要添加到首部，就用prepend()好了a = []a.append(1)a.append(2.1)a.append('Hello')print a

# 06 元组
元组和列表类似，唯一的不同是元组中的元素在初始化之后不能再更改，因此可以理解成一个只读的变量。
# 使用()定义一个元组a = (1, 2.1, 'Hello')# 尝试修改元组中的元素会报错a[0] = 100

# 07 字典
使用一个key来访问相应的value，即一种键值对的数据形式。
# 使用{}定义一个字典a = {}# 使用key来赋值valuea['k1'] = 1a['k2'] = 2.1a['k3'] = 'Hello'
列表中的元素是有序对等的，所以是用下标来赋值和访问，而字典中的元素是无序的，所以是用key来操作相应value。
has_key() 判断字典中是否有某个key。

# 08 注释
在Sublime中，选中需要注释的内容，按Ctrl+/即可完成注释。

# 09 保留字符
变量命名时避开保留字符

# 10 行和缩进
在Python中，代码块的边界不是通过大括号等符号进行显式划分，而是通过行的缩进实现的。
连续相同缩进水平的代码处于同一个代码块，在使用 for 、 while 、 if 、 try 等语法时需要注意每行代码的缩进。

# 11 运算符
算术运算符：+，-，*，/，%，即加、减、乘、除、取余
比较运算符：==，!=，>，<，>=，<=，即等于、不等于、大于、小于、大于等于、小于等于
赋值运算符：=，+=，-=，*=，/=，%=，即赋值、加赋值、减赋值、乘赋值、除赋值、取余赋值
逻辑运算符：and，or，not，即与、或、非

# 12 条件
a = 1# 单个条件if a == 1:    print 11111# 处理条件不成立的分支if 
a == 2:    print 22222else:    print 33333# 多个条件，加多少个都可以if 
a == 1:    print 11111elif a == 2:    print 22222else:    print 33333

# 13 循环
如果需要打印从1到100的100个数，肯定不会傻傻地写100行print代码，而是会用循环来处理类似的重复性工作。

# 14 while循环
while 循环的思想是，只要某一条件成立，就不断执行循环体里的代码，直到条件不再成立。
flag = 1while flag < 10:    print flag    
# 一定要记得在循环体里修改条件变量    
# 否则可能导致死循环    flag += 1

# 15 for循环
for 循环的循环次数一般是事先预知的，将一个标志变量从某个起始值迭代到某个终止值后即结束。
li = [1, 2.1, 'Hello']dict = {'k1': 1, 'k2': 2.1, 'k3': 'Hello'}
# 遍历列表，这里的item只是一个临时变量，取别的名称也行for item in li:    print item
# 遍历字典的全部key，这里的key也只是一个临时变量，名称不重要for key in dict.keys():    print key
# 遍历字典的全部value，这里的value也只是一个临时变量，名称不重要for value in dict.values():    print value# 同时遍历key和valuefor key, value in dict.items():    print key, value

# 16 循环控制
循环控制主要包括三种： pass 、 continue 、 break 。
pass 表示什么也不做，只是占一行代码的位置；
continue 表示立即退出本轮循环，继续执行后续轮循环；
break 表示立即推出循环，后续循环也不再执行。

# 17 时间
# 来看一下当前时刻的时间戳吧import timet = time.time()print t, type(t)
import time# 时间文本转时间戳，精确到秒a = '2016-10-01 10:00:00'a = int(time.mktime(time.strptime(a,'%Y-%m-%d %H:%M:%S')))print a
# 时间戳转时间文本b = int(time.time())b = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(b))print b

# 18 异常
异常的结构由 try 、 except 、 else 、 finally 四部分组成。
try:    # 尝试执行这些代码    
print 1 / 0except Exception, e:    
# 如果出现异常就进行处理    
# e为出现的异常类型    
print eelse:    
# try里的代码没有出错    
# 可以执行后续工作了    
print '没有出错'finally:    
# 无论是否出错，都会执行的代码    
print '一定会执行'

# 19 函数
函数的作用是代码模块化，将可重用的代码封装成一个函数，这样在需要使用的时候就只需调用写好的函数即可，而不用重新写一遍代码。
函数的使用包括两个部分，函数的定义和函数的调用。除此之外，函数可以有一个或多个参数，参数之间以逗号分开，为函数的功能提供更多的灵活性。
# 定义函数def hello(name1, name2):    print 'Hello ' + name1 + ' ' + name2# 调用函数hello('Python', 'JavaScript')
